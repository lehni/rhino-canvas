/*
 * Copyright (C) 2003 by Christian Lauer.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * If you didn't download this code from the following link, you should check if
 * you aren't using an obsolete version:
 * http://sourceforge.net/projects/ujac
 */

package org.ujac.ui.editor;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

import org.ujac.ui.BaseDialog;

/**
 * Name: GotoLineDialog<br>
 * Description: A 'goto line' dialog for the TextArea.
 * <br>Log: $Log: GotoLineDialog.java,v $
 * <br>Log: Revision 1.1  2006/11/05 01:22:38  haustein
 * <br>Log: 0.20
 * <br>Log:
 * <br>Log: Revision 1.2  2004/07/03 00:59:12  lauerc
 * <br>Log: Enhanced line number handling.
 * <br>Log:
 * <br>Log: Revision 1.1  2004/07/03 00:46:22  lauerc
 * <br>Log: Initial revision.
 * <br>Log:
 * @author $Author: haustein $
 * @version $Revision: 1.1 $
 */
public class GotoLineDialog extends BaseDialog {
  
  /** The text area. */
  private TextArea textArea;

  /**
   * Sets the current line number.
   * @param lineNumber The line number to set.
   */
  public void setLineNumber(int lineNumber) {
    this.lineNumberField.setText(Integer.toString(lineNumber + 1));
  }
  
  /**
   * Constructs a GotoLineDialog instance with specific attributes.
   * @param textArea The text area.
   */
  public GotoLineDialog(TextArea textArea) {
    super(textArea.getFrame(), false);
    this.textArea = textArea;
    setTitle("Goto line");
    initComponents();

    // defining key bindings
    InputMap inputMap = this.getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
    inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "escape");
    inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "enter");

    ActionMap actionMap = this.getRootPane().getActionMap();
    actionMap.put("escape", new AbstractAction() {
      public void actionPerformed(ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });
    actionMap.put("enter", new AbstractAction() {
      public void actionPerformed(ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });

    // centering dialog over text area
    centerDialog();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    java.awt.GridBagConstraints gridBagConstraints;

    mainPanel = new javax.swing.JPanel();
    lineNumberLabel = new javax.swing.JLabel();
    lineNumberField = new javax.swing.JTextField();
    buttonPanel = new javax.swing.JPanel();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();

    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        closeDialog(evt);
      }
    });

    mainPanel.setLayout(new java.awt.GridBagLayout());

    lineNumberLabel.setText("Line number");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    mainPanel.add(lineNumberLabel, gridBagConstraints);

    lineNumberField.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        lineNumberFieldKeyReleased(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    mainPanel.add(lineNumberField, gridBagConstraints);

    getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

    buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });

    buttonPanel.add(okButton);

    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });

    buttonPanel.add(cancelButton);

    getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

    pack();
  }//GEN-END:initComponents

  private void lineNumberFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lineNumberFieldKeyReleased
    checkLineNumberInput();
  }//GEN-LAST:event_lineNumberFieldKeyReleased

  /**
   * Checks if the input for the line number is valid.
   * @return true if the input is currently valid, else false.
   */
  private boolean checkLineNumberInput() {
    String line = lineNumberField.getText();
    if (line.length() == 0) {
      lineNumberField.setForeground(Color.black);
      return true;
    }
    try {
      int lineNumber = Integer.parseInt(line);
      if ((lineNumber < 1) || (lineNumber > textArea.getLineCount())) {
        lineNumberField.setForeground(Color.red);
        return false;
      }
      lineNumberField.setForeground(Color.black);
    } catch (NumberFormatException ex) {
      lineNumberField.setForeground(Color.red);
      return false;
    }
    return true;
  }
  
  private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    if (!checkLineNumberInput()) {
      return;
    }
    String line = lineNumberField.getText();
    try {
      int lineNumber = Integer.parseInt(line);
      textArea.gotoLine(lineNumber - 1);
      this.hide();
    } catch (NumberFormatException ex) {
      lineNumberField.setForeground(Color.red);
      //JOptionPane.showMessageDialog(textArea, "'" + line + "' is no valid line number", "Invalid line number", JOptionPane.ERROR_MESSAGE);
    }
  }//GEN-LAST:event_okButtonActionPerformed

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    this.hide();
  }//GEN-LAST:event_cancelButtonActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel buttonPanel;
  private javax.swing.JButton cancelButton;
  private javax.swing.JTextField lineNumberField;
  private javax.swing.JLabel lineNumberLabel;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JButton okButton;
  // End of variables declaration//GEN-END:variables
  
}
